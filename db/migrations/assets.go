// Code generated by go-bindata.
// sources:
// db/migrations/0001_initial_migration.sql
// db/migrations/0002_dex_admin.sql
// db/migrations/0003_user_created_at.sql
// db/migrations/0004_session_nonce.sql
// db/migrations/0005_refresh_token_create.sql
// db/migrations/0006_user_email_unique.sql
// db/migrations/assets.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001_initial_migrationSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcf\x8a\xdb\x30\x10\xc6\xef\x79\x0a\x91\xd3\x86\x66\x9f\xa0\xa7\x6d\x71\x61\xa1\xb4\xd0\x75\xa1\x37\x31\xb5\x26\xee\x50\xfd\x43\x1a\x6f\xd7\x6f\x5f\xd9\x4e\x14\xc7\xce\xc6\x26\x81\x84\x58\xd6\xfc\xe6\x9b\x6f\x66\x1e\x1f\xc5\x07\x43\x75\x00\x46\xf1\xd3\x6f\x3e\xff\x28\x9e\xca\x42\x94\x4f\x9f\xbe\x16\xe2\xf9\x8b\xf8\xf6\xbd\x14\xc5\xaf\xe7\x97\xf2\x45\x6c\xa1\xe1\x3f\x4a\x36\x11\xc3\x56\x3c\x6c\xc4\xf0\xd9\x92\xda\x0a\xc6\x37\x16\xd6\xa5\x6f\xa3\xb5\xf0\x81\x0c\x84\x56\xfc\xc5\x76\x9f\xaf\xa1\x01\xd2\xc3\xcd\xc9\xa1\x7c\xc5\x40\x07\xc2\xc4\xf9\xed\x9c\x46\xb0\xe7\x0b\x8a\xa2\xd7\xd0\x4a\x0b\x06\xa7\xc1\xa0\x0c\xd9\x1c\xb3\x13\x1f\x37\x37\xd5\x57\x9a\xd0\xb2\x24\x95\x7e\x89\xdb\x3b\x4a\x88\x58\x05\xe4\x94\xb1\x65\x84\xf3\xb1\x41\x06\x05\x0c\x03\x63\xb7\x24\xc3\x59\x8b\x15\xbb\x20\xd3\xbf\x03\xd5\x77\xe8\xe0\xd6\x9f\xcc\xe8\x79\x3d\xa5\xcf\xbd\xe4\x41\xc2\x8c\xf3\xbd\x82\x6e\xf0\x58\xcf\xd5\x9c\x8b\x40\x0f\x31\xfe\x73\x41\x49\xb2\x07\x37\x46\x77\x53\x22\x57\xd6\x73\x82\x4c\x1b\x9c\xe1\xf8\xe6\x29\x60\x4c\x4a\xa9\x26\xbb\x5c\x66\xc4\x18\xc9\xd9\x7b\x5a\xcc\x69\x0f\xa6\x3a\x52\xd7\xd3\xa9\x92\xc0\x27\x05\xa3\x09\x1e\xa4\x5d\x7d\x97\x27\x6e\x06\x1c\x5e\x5c\x4d\x16\x50\x25\x60\xc5\xb2\x09\x3a\x37\xf9\x3c\xb4\x13\x50\x1e\xa6\x79\x92\x8b\x0e\xec\x3b\x70\x4d\x91\xbb\xdd\x5d\xbb\x31\x47\x1b\xe5\x64\x6a\xfa\xc7\x55\xeb\x32\x84\xcf\xa5\xdd\x32\x2d\x99\xa2\x71\xbd\xc6\x80\xc6\x31\xe6\xad\x96\x06\xbc\x27\x7b\xb1\x55\x73\x93\xb2\xf0\xf7\xdc\x1a\x75\xe3\x88\x7f\x2f\x70\x54\xb9\x78\xb8\x4c\xb5\x1f\x87\xef\xba\x4a\xfe\x07\x00\x00\xff\xff\xae\xbe\x65\x61\x6c\x05\x00\x00")

func dbMigrations0001_initial_migrationSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001_initial_migrationSql,
		"db/migrations/0001_initial_migration.sql",
	)
}

func dbMigrations0001_initial_migrationSql() (*asset, error) {
	bytes, err := dbMigrations0001_initial_migrationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001_initial_migration.sql", size: 1388, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0002_dex_adminSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\xce\xc9\x4c\xcd\x2b\x89\xcf\x4c\x01\x92\x99\x25\x95\x0a\x8e\x2e\x2e\x0a\xce\xfe\x3e\xa1\xbe\x7e\x0a\x4a\x29\xa9\x15\xf1\x89\x29\xb9\x99\x79\x4a\x0a\x49\xf9\xf9\x39\xa9\x89\x79\xd6\x5c\x5c\xa1\x01\x2e\x8e\x21\xae\x0a\x4a\x68\x1a\x95\x14\x82\x5d\x43\x50\xb4\xd8\x2a\xa4\x25\xe6\x14\xa7\x5a\x73\x01\x02\x00\x00\xff\xff\x89\xb3\xb1\x5d\x7e\x00\x00\x00")

func dbMigrations0002_dex_adminSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0002_dex_adminSql,
		"db/migrations/0002_dex_admin.sql",
	)
}

func dbMigrations0002_dex_adminSql() (*asset, error) {
	bytes, err := dbMigrations0002_dex_adminSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0002_dex_admin.sql", size: 126, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0003_user_created_atSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x2c\x2d\xc9\x48\x89\x2f\x2d\x4e\x2d\x52\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x50\x4a\x2e\x4a\x05\x2a\x4e\x89\x4f\x2c\x51\x52\x48\xca\x4c\xcf\xcc\x2b\xb1\xe6\xe2\x0a\x0d\x70\x71\x0c\x41\xd1\x12\xec\x1a\x82\xaa\xd6\x56\xc1\xc0\x9a\x0b\x10\x00\x00\xff\xff\x28\xce\xe1\xe1\x6f\x00\x00\x00")

func dbMigrations0003_user_created_atSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0003_user_created_atSql,
		"db/migrations/0003_user_created_at.sql",
	)
}

func dbMigrations0003_user_created_atSql() (*asset, error) {
	bytes, err := dbMigrations0003_user_created_atSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0003_user_created_at.sql", size: 111, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0004_session_nonceSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x4e\x2d\x2e\xce\xcc\xcf\x53\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x50\xca\xcb\xcf\x4b\x4e\x55\x52\x28\x49\xad\x28\xb1\xe6\x02\x04\x00\x00\xff\xff\x77\x11\x16\x8b\x3c\x00\x00\x00")

func dbMigrations0004_session_nonceSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0004_session_nonceSql,
		"db/migrations/0004_session_nonce.sql",
	)
}

func dbMigrations0004_session_nonceSql() (*asset, error) {
	bytes, err := dbMigrations0004_session_nonceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0004_session_nonce.sql", size: 60, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0005_refresh_token_createSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x51\x4f\xc2\x30\x10\xc7\xdf\xf7\x29\xee\x0d\x88\x62\xc2\x2b\x3e\x95\xed\x0c\x8b\x5d\xa7\x5d\x2b\xf2\xb4\x54\x56\x59\xc3\x1c\x73\xad\x46\xbe\xbd\x65\x13\x08\xc4\x68\xdf\xfa\xbb\xfb\xdf\x2f\x77\xe3\x31\x5c\xbd\x99\x75\xab\x9c\x06\xd9\x04\x21\x47\x22\x10\x04\x99\x51\x84\x56\xbf\xb6\xda\x96\xb9\xdb\x6e\x74\x0d\xc3\x00\xfc\x33\x05\xbc\x98\xb5\xa9\x1d\xb0\x54\x00\x93\x94\x5e\x77\xbc\x51\xbb\x6a\xab\x8a\xbc\x54\xb6\x04\xa7\xbf\x5c\x8f\x3f\xac\x6e\x73\x9f\x39\x91\x55\x65\x74\xed\x0e\x2c\x18\xdd\x06\x07\x69\x86\x8f\x12\x59\x78\xe1\xf5\x9d\xb9\xd5\xef\x5d\x36\x13\x84\x0b\x58\xc4\x62\x0e\x93\x0e\xc4\xcc\x67\x13\x64\x02\x66\xcb\x1f\xc4\x52\x48\x62\xf6\x44\xa8\xc4\xe3\x9f\x3c\x9f\xfe\x21\x09\xe7\x08\x13\xaf\x25\x54\x20\xff\xdb\x0a\xe9\x82\x61\xb4\x1f\x7e\x56\xbd\x31\xc5\x31\xdf\x9f\x2a\x65\xf4\xa2\x07\xfa\x72\x98\x52\x99\xb0\xfd\xd9\x32\x14\x10\xe1\x1d\x91\x54\x40\xed\x57\xff\x54\xd5\x70\xf0\x9b\x74\x30\x9d\xb6\x7a\xbd\xaa\x94\xb5\xa3\x7f\x35\xdd\x4e\x24\x8a\xbc\x88\x65\x82\x93\xd8\xdf\xe2\x7c\x68\xb3\xd1\x3b\x78\xe0\x71\x42\xf8\x12\xee\x71\x09\x43\x53\xf8\xb9\xdf\x01\x00\x00\xff\xff\xff\xeb\x3d\xc4\xf9\x01\x00\x00")

func dbMigrations0005_refresh_token_createSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0005_refresh_token_createSql,
		"db/migrations/0005_refresh_token_create.sql",
	)
}

func dbMigrations0005_refresh_token_createSql() (*asset, error) {
	bytes, err := dbMigrations0005_refresh_token_createSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0005_refresh_token_create.sql", size: 505, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations0006_user_email_uniqueSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xf0\xf7\xf3\x89\x54\x48\x2c\x2d\xc9\x48\x89\x2f\x2d\x4e\x2d\xe2\x52\x00\x02\x47\x17\x17\x05\x67\x7f\xbf\xe0\x90\x20\x47\x4f\xbf\x10\x24\xd9\xf8\xd4\xdc\xc4\xcc\x9c\xf8\xec\xd4\x4a\x85\x50\x3f\xcf\xc0\x50\x57\x05\x0d\xb0\x88\xa6\x35\x17\x20\x00\x00\xff\xff\x18\x48\x0d\x30\x63\x00\x00\x00")

func dbMigrations0006_user_email_uniqueSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0006_user_email_uniqueSql,
		"db/migrations/0006_user_email_unique.sql",
	)
}

func dbMigrations0006_user_email_uniqueSql() (*asset, error) {
	bytes, err := dbMigrations0006_user_email_uniqueSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0006_user_email_unique.sql", size: 99, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrationsAssetsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x99\x5d\x6f\xdb\x56\xd2\xc7\xaf\xad\x4f\xc1\x1a\x68\x21\x3d\xf0\x23\xf3\x55\x12\x0d\xe4\xa6\x49\x16\xc8\x45\x53\x60\x9b\xbd\x5a\x2f\x84\x43\xf2\xd0\x25\x2a\x4b\x8e\x28\x77\x9d\x04\xf9\xee\x3b\xbf\x33\x23\xdb\xb1\x25\x3b\x71\x1a\x04\xbd\x60\x2c\x1e\xce\x99\x33\xef\x33\xe7\x9f\xe3\xe3\xe8\xf9\xaa\xf1\xd1\x99\x5f\xfa\xb5\xdb\xf8\x26\xaa\xde\x45\x67\xab\xff\xaf\xba\x65\xe3\x36\x6e\x3c\x10\x82\x7e\x75\xb9\xae\x7d\x7f\xc2\xef\xa6\x3a\x3e\xef\xce\x84\xb2\x5b\x2d\xfb\xe3\x38\x8e\x93\x79\xb7\xec\x36\x9d\x5b\xcc\xaf\xd7\xc7\xfd\xdb\xc5\x4e\xda\x74\xde\xf8\xab\xb9\x6b\xce\xbb\xfd\x34\xd9\xfc\xb2\xf7\xeb\x79\xbd\xf6\x48\x33\x77\x9b\xbd\x94\xf9\xbc\xf7\x7d\x2f\x6f\xf3\xe5\x6a\x59\xfb\xbd\x74\xc5\x7c\xed\xdb\xb5\xef\x7f\x9f\x6f\x56\x7f\xf8\xa5\xb1\xde\x4b\x3e\x51\x01\xfc\xb9\xeb\x16\xf3\xcb\x65\xf7\xf6\x72\x0f\xad\xeb\x7b\xbf\xe9\xc7\x67\x2b\x3e\xbd\xf8\x35\x7a\xfd\xeb\x9b\xe8\xe5\x8b\x57\x6f\x7e\x18\x0c\x2e\x5c\xfd\x87\x3b\xf3\xd1\x0d\xf5\x60\xd0\x9d\x5f\xac\xd6\x9b\x68\x38\x38\x38\xac\xde\x6d\x7c\x7f\x28\x3f\xea\xd5\xf9\x85\x48\xd6\x1f\x9f\xbd\xef\x2e\x58\x68\xcf\x37\xfc\xe9\x56\xfc\xdb\x6f\xd6\xdd\xf2\x2c\x10\xae\xc2\xbf\x9b\xee\xdc\xeb\xe7\xe3\x6e\x75\xb9\xe9\x16\xbc\x5c\xb8\xcd\xef\xc7\x6d\xb7\xf0\xfc\x38\x1c\x8c\x06\x83\xf6\x72\x59\x47\xe6\xc0\x7f\x7a\xd7\x0c\xf9\x11\xfd\xfb\x3f\x1c\x7b\x14\x2d\xdd\xb9\x8f\x94\xf5\x28\x1a\x6e\x57\xfd\x7a\xbd\x5a\x8f\xa2\x0f\x83\x83\xb3\xf7\xe1\x2d\x3a\x79\x16\x21\xd5\xf8\xb5\xff\x2f\x4c\xfc\x7a\x18\xc4\xe6\xfd\xe7\xcb\xb6\x95\x77\xd8\x8e\x46\x83\x83\xae\x0d\x1b\x7e\x78\x16\x2d\xbb\x05\x2c\x0e\xd6\x7e\x73\xb9\x5e\xf2\x7a\x14\x89\x4a\xe3\x97\x70\x6f\x87\x87\x30\x8a\x7e\x7c\x7b\x12\xfd\xf8\xe7\xa1\x4a\x12\xce\x12\x1e\x1f\x07\x83\x83\x3f\xdd\x3a\xaa\x2e\xdb\x48\xcf\xd1\x43\x06\x07\x73\x15\xe7\x59\xd4\xad\xc6\xcf\x57\x17\xef\x86\x3f\x09\xcd\x91\xc8\x26\xbb\xea\xc5\xcb\xad\xa4\xe3\xe7\x8b\x55\xef\x87\xa2\xfe\x5f\x24\x0f\x6c\x94\xff\x1e\x46\x42\xa8\x72\xdb\xa2\x88\x35\xfe\x19\xd1\x87\xa3\x23\x28\x06\xf2\x6d\xf3\xee\xc2\x47\x21\x50\x30\xf9\x65\xbd\x81\x4b\xd0\xcf\xfc\x21\xc7\x2c\xdb\x55\x14\xad\xfa\xf1\x3f\xc4\x87\xaf\xe4\xe5\x7a\x9f\xb9\x70\xbb\x7e\x8b\xc3\x2d\x1f\x0e\x0e\xfa\xee\xbd\x8f\xba\xe5\x66\x92\x0f\x0e\xce\xc9\x65\xe3\xf5\x8b\xfc\x0e\x2b\x6f\x24\x6c\x22\x62\x67\xcc\x2f\xd8\x87\x08\x19\xb6\xdd\xdd\x23\x46\xd1\x6b\xe1\x3c\x1c\x19\x6f\x8e\x32\xe5\xda\x6e\xcc\xa1\xb2\x79\xff\xde\xdf\x44\x10\xd9\x1b\x44\xf9\x74\x2b\x22\x3e\xb8\x15\x59\x65\xeb\x2d\xc9\x3f\x65\x80\x5e\x8f\x31\x40\x39\xe1\x71\xad\xe8\x3d\x0e\xa6\xfd\x7e\x26\xaf\xfa\x17\xdd\x5a\x58\x54\xab\xd5\xe2\xf6\x6e\xb7\xe8\x1f\xd1\xfc\x5d\xaf\x8a\xfb\x75\xeb\x6a\xff\xe1\xe3\xad\xdd\x16\x09\x04\xf7\xbc\xa9\x7e\xb9\xae\x08\xbb\x6b\xe7\x6f\x6f\x17\x12\xea\x1a\x1b\xc3\xc3\xd3\xab\xa4\x3d\xbd\x9a\x55\xa7\x57\xf1\x4c\x9e\xd8\x9e\xf2\xf4\x6a\xe2\x65\xdd\xd6\x5a\xa1\x29\x6b\x79\xb2\xd3\xab\x1a\x7a\x77\x7a\xd5\xc8\x9e\x4c\xbe\x25\xf2\xd4\x93\xd3\x2b\x2f\xeb\x53\xd9\x17\xcb\xb7\x32\x91\xef\x42\x3b\x93\xf5\x89\x3c\xa5\x7c\x73\x42\xe7\xa6\xf2\xde\x08\x9d\x7c\x9f\xc8\xe3\xe4\xa9\x72\xa1\x95\x6f\xd3\x42\xdf\x33\xa1\xc9\x58\x97\xf7\x14\xbe\x22\x47\x81\x0c\xb2\x2f\x17\x9e\x89\xf0\x9f\x08\xbf\x66\xaa\x7f\x0b\x7e\xcb\xb9\xb9\xd0\x25\xc2\xab\x96\xf5\xda\xab\x4c\xec\x9f\x09\xaf\x99\xac\x17\xa2\x4b\x23\xef\xad\xe8\xe1\x91\xa9\xd2\xfd\xc8\x97\x78\xb5\x43\x2d\x67\xc6\x53\x3d\x07\x79\xd0\x3d\x67\x8f\xe9\x03\x7d\xe6\xd5\x1e\xa9\xf0\x2b\x39\x47\xe4\xc9\x53\xf9\x2d\x67\xe4\xad\xea\x5a\xc1\x0f\xd9\x65\xbd\x2d\xd5\xbe\xad\xd0\xb7\xb2\x56\x35\x26\x27\xfa\x0a\xad\x97\xf3\x4a\x79\x5a\xa1\xcd\x65\x6d\x52\xab\x1d\x3c\xb6\x90\xef\xb9\xf0\xcf\x90\x51\xde\x6b\x91\xa1\x90\xdf\x59\xad\x74\xb5\xf0\x69\x63\xd5\xbf\x94\xfd\x8d\x53\xfb\xa3\x3b\x76\x44\x06\x74\x76\x85\xca\xee\x32\xb5\x2b\x7b\xb0\x4b\x5c\x9b\x6d\xcc\x2e\xc8\x34\xdd\xfa\xab\x55\x39\x62\x74\x4f\xf5\xec\x5a\x64\xaf\x4b\x5d\x9f\x1a\x7d\x1e\xab\xcd\xea\xd4\xe4\x91\xef\xbe\xd1\x78\xc1\x76\x55\xac\x3a\xc6\x95\xc6\x8d\x4b\xd5\x77\xf8\x1c\xdd\x58\x8f\x27\x1a\x1b\x75\xa2\x71\x82\x5c\xe8\x94\xc8\xdf\x0a\x9f\x67\xea\x9f\x10\x1b\xec\x95\x73\x0b\xec\xe6\x94\x4f\x25\x3c\x53\x39\xbb\x44\x7e\xe2\xb6\xb4\xf8\xac\xf4\x0c\xe2\x18\xff\xc7\xf2\xdd\xe7\xea\xab\x8a\x18\x2c\x54\xff\x36\xd3\xf7\x3c\x51\x59\xa0\x43\x86\x18\x9f\xf3\x6d\xaa\xfc\x83\xfd\xcd\x9f\x89\xd0\x54\xf2\x37\x8d\x35\x36\xaa\x56\xe9\x91\x6d\x2a\xf4\x5e\xce\xf3\xb1\xda\x1f\x7b\xd6\xb5\xae\x91\x23\x59\xa3\x3e\x21\x97\x88\x07\x64\xe2\x6c\x6c\x38\xab\x4d\x1e\x59\x9f\xa5\x9a\x87\xf8\x0b\xf9\xa1\x87\x3f\xb6\x45\x86\x60\xfb\x56\xf3\xa5\x15\xba\x69\xa6\x7c\xf2\x52\x6d\x12\x9b\xbd\xf0\x03\x32\x15\xf2\x3d\x4d\xd5\x76\xc8\x05\x3d\x67\xe4\xc2\x2f\xa9\x94\x2f\x71\x47\xac\x92\x23\x29\x75\x20\xd6\xef\xd8\xd1\x95\x9a\x53\xe8\x5d\xd4\x9a\x3b\xf8\x3c\x99\x69\x5c\xe0\xb3\x29\xdf\x9c\xea\x3b\x29\x55\x3e\x47\x3c\xca\x5a\xb1\xf5\x7d\xa6\xbc\x88\xd9\x5a\xf8\xa7\x53\xb5\x39\xf1\x49\xed\x21\x1f\x1d\x71\x49\xad\x68\x34\x3f\xa0\xc1\x16\xf8\x87\xb8\x28\xbc\xca\x90\x37\x1a\xe7\xd4\x88\xb4\x50\x79\x89\xcb\xa0\x7f\xa9\xe7\x62\x03\xe2\x92\xbc\xa1\xde\x10\x4f\xd0\x87\x73\x26\xea\x13\x64\x09\x75\x50\xd6\x7c\xad\xb1\x33\x8d\x95\x3f\xf5\x0c\x9d\x9b\x46\x65\xe2\x37\x36\xcf\xa7\x6a\x37\xcf\xb9\xc2\x77\x22\x67\xb5\x4e\x6b\x50\x41\xac\x41\x97\x6a\x8c\xe1\x3b\x7c\x0e\x0f\xd6\x52\xf8\x96\x9a\x0f\xd4\x43\xfc\x4d\xde\xce\xac\x9e\xc2\x1f\x1f\x38\xe8\x26\xaa\x77\x55\xab\x1d\xb0\x31\xf1\xca\x19\xf8\x90\xba\x8c\xbe\xc4\x49\x8b\x7d\x6b\xad\x93\xd4\x30\x9f\x69\xfc\x4f\xa9\x59\xad\xea\x54\x10\xff\xf8\x4a\xd6\xab\x99\xfa\x97\xba\x10\x7a\xc1\x54\x6b\x79\xe5\xd4\xe7\xc4\x15\x71\xb4\xed\x0d\xd4\x3e\x1e\xe7\xb5\xce\x91\x43\xd4\x72\xea\x51\x5c\x6c\xe9\x0e\xb7\x53\xe2\x67\x35\x24\x1b\x6a\x76\x0d\x8b\xdb\xd1\xe7\xd6\xb0\x29\x53\xd2\xe7\xf5\xb9\x23\xa1\x3c\xfc\xdc\xfb\xc4\xa1\x50\x8f\xae\x47\x97\xcf\xe2\x8f\xc4\xff\x17\x66\xaf\xdb\x12\x87\xe1\xeb\x7a\xc2\xfd\x12\xfd\x1f\x1b\x2c\xaf\xe7\xc1\x30\xd1\x09\xf3\x3b\x63\xc2\x07\x06\xa8\x93\xe8\x0b\x54\x8e\x98\x9b\x4e\xa2\x24\x9b\xcd\x8e\x22\x46\xa0\x93\xdb\x13\xd2\x30\x4f\xe3\x51\x58\x67\xb0\x39\xd1\xc1\xe7\x5f\xcb\xee\x6a\x98\x1c\x45\xf1\x48\x26\x58\x87\x14\x3f\x05\x13\x7c\x08\x7a\x9f\x44\xa6\x3e\x22\x9e\x44\xe1\xcf\xc7\x6b\x2f\xba\xa3\x87\x86\x95\x5b\x97\xb7\xa7\x0e\x29\x34\xaa\xd0\x1c\x0a\x6d\x0c\x61\x10\x68\x34\xc0\x53\x6b\xa6\x69\xad\x05\x12\x1a\xf8\x91\x88\x14\xea\x29\x09\x94\x2b\x5f\x12\x32\x6e\xb4\x60\x41\xc3\xfb\x34\xd7\x26\x3d\xb5\xc4\xcb\x67\xc6\xbf\x54\xfe\x9c\x93\x56\xda\x7c\x48\x76\xd6\x68\x9e\x14\x16\x12\x9d\xe2\x44\x83\xa2\x41\xcf\x64\x5f\x6a\x4f\x68\xd8\x5e\x13\x8d\xe1\x22\x0c\x45\x5e\x1b\x59\x6c\x49\x48\x21\xa6\x60\xd2\x74\x18\x46\x38\x83\x35\x92\x18\xde\x14\xb0\xdc\x9a\x3f\xba\xb5\xf6\x64\xb6\x6f\x66\x34\x14\x7d\x8a\x66\x51\xdf\x34\x77\x64\x08\xf2\x24\x9a\xd4\xdb\x33\x27\x33\x2d\x22\xc8\xcc\xc0\x42\xa3\x28\x6c\x08\xa3\x78\x86\xc1\x0d\xfb\x39\x2d\xd6\xe8\x47\xc1\x82\x96\x66\x4e\x13\xa0\x38\x71\x46\x9c\xde\x2f\x20\xc8\x54\x59\xe3\x0d\x85\xde\xdf\xf2\xed\xde\x02\xf2\x69\x90\x7c\x75\xe1\xf8\x94\xdd\xee\x82\x71\x07\x54\x78\xb0\x50\x7c\xca\xef\x09\x05\x62\xa7\x7e\xdf\xac\x30\xdc\x53\x6d\x5b\x10\xd2\xc9\xf7\xaf\x07\xf7\x80\x9a\xbf\x4b\x55\x80\x57\x6a\xa3\x32\xef\x21\x5b\x5b\x5d\xe3\x9a\x92\x1a\x0f\x5a\x31\xfb\xc3\xde\x44\xdf\xb9\x22\xd0\xc2\x39\xaf\x2d\xf4\x29\x2c\xe3\x82\x9c\xde\x32\xbd\xd0\xcc\xcb\x6d\xdc\xe5\xea\xc1\xb9\xf0\x81\x77\xa8\x4e\xce\x2a\x93\x8d\x9f\xa9\x8d\x0d\xde\xae\x26\x64\x3a\xfa\x04\x39\xec\x3a\xc0\xf8\xd8\xc8\x93\xa4\x3a\x06\x51\x01\xc8\x7c\xe7\xac\x7a\x4c\x74\x4c\x67\x6c\x2b\x6d\x7c\x4f\xe2\xfb\xd9\x9d\x5a\x75\xf4\x76\x95\xe1\xfa\xf1\x78\x76\xef\x72\xf9\x57\xe7\xf8\x2e\xa6\xbb\x33\x7d\x27\x34\xf8\x60\xbe\xef\xe2\xfd\x84\xac\x7f\x40\xef\x6f\x96\xfb\x7b\x94\xdd\x56\x80\x24\xf9\xfe\x15\xe0\x0e\x00\xfb\x77\xc8\x7f\xe2\x7e\x9b\xe3\xe4\x6a\x38\xcb\x72\x90\x3c\xfe\xd2\x9c\x27\x87\xeb\xca\x26\x8a\x4a\x79\x73\x0e\x32\x84\xb3\x4a\xbd\x22\xf0\x7b\x9b\xdb\xa1\xdb\xe6\xf7\x73\x92\x2b\x20\x30\x02\xd7\x25\xec\xc6\x75\xe8\xf1\x9c\xbc\xef\x84\xaf\xce\xc8\xfb\x2c\x77\xe7\xe3\x0e\x00\xfe\xc1\x6c\xbc\xcf\xf7\x09\xb9\xb8\x57\xdf\x6f\x96\x89\x3b\xd5\xb4\x3c\x9c\xc4\xdf\x3f\x0d\x77\xff\xff\xc6\x53\xb3\x91\xcb\x70\x19\x6b\xf4\xd3\xb5\x00\x3d\xae\x81\x44\x2e\xaf\xad\x66\x03\xf3\x2d\xe0\x1f\x19\xc7\xfe\x49\xaa\xb4\x74\x31\xe6\x64\xe6\x52\x80\xa6\xd8\xc0\x10\x66\xc8\x30\x77\xda\x1c\x4e\x56\x32\xa3\x16\x06\x70\x01\xdc\x00\xe0\x00\x1e\x30\x97\x92\x35\x01\xa0\xf2\x7a\xf9\xe6\x22\x0b\x30\x80\xfc\x80\x1a\xcc\xbf\x41\x16\xa7\x17\xfe\xb6\xd2\xf7\xd4\x32\x89\x8b\x35\x97\x74\x66\xe9\xca\x2e\xf3\x01\xc4\x34\x20\x85\x0b\x3b\x80\x08\x99\x98\x1a\x58\x00\xf8\x12\xba\x65\xae\xf4\x45\x72\x03\xc0\x01\x20\x55\x13\x05\xf1\xb8\xf0\x57\x06\x62\x61\x3f\x2a\x06\x76\x40\xfe\x60\x47\x00\x8a\x4c\xa7\x00\x40\x81\x72\xa6\x17\xf8\x70\x47\x68\x14\x74\x2b\xac\x02\x00\x0e\x00\x78\x01\x98\x20\x77\x65\x53\x02\x3a\x01\x58\x38\x03\xe6\xc2\x7a\xae\x32\xc4\x36\xc3\x23\x13\xfa\xcd\x5a\x05\x23\x5d\x6d\xf2\x64\x0a\x6a\x71\xbf\x28\xad\xf2\x61\x3f\xe4\x0c\x3e\xf1\x5a\x51\x01\x86\x00\x3c\x02\xa8\x36\x55\x40\x08\x50\x18\x7e\x4c\x18\x85\x81\x10\x01\x74\xe2\x7e\xd4\x98\xde\x85\x82\x10\xf8\x32\x80\x9f\x99\xda\x89\x69\xa3\xd8\xfa\x27\xd5\x73\xd0\x8f\xbf\xac\x05\xd0\x69\xaa\xf4\x00\x32\x54\xc2\x00\x52\x55\x06\xf0\xe6\x37\xd3\x11\xfb\xa9\xbc\x39\xba\x1a\x4f\xbf\xd5\xab\xd6\xbf\xad\xdd\x8b\x88\xe3\x00\x62\xce\x94\x37\xe0\x28\xf7\x1d\xec\x95\x6e\xbb\x4c\xa5\x13\x95\x2f\x0d\xb8\x33\x70\x9b\x73\xb9\xdb\x14\x06\xfe\x12\x33\x00\x54\xfc\x6d\x0c\x30\x66\x92\xc3\x7e\x74\x1a\x67\xc0\x1d\x71\x47\xf7\xc1\xb7\x85\xdd\x21\x2b\x03\xc2\x89\x2b\x40\x24\xee\x5a\xc4\x13\xf6\x4b\x0c\xa8\x42\x26\x80\x41\xfc\x00\xd0\x87\x6c\xac\x05\x60\x32\x56\x90\x08\xf0\x1b\x5f\x91\x77\xc1\xe6\x80\x60\x4e\xe5\x63\xd2\x0b\x00\xa9\x01\x72\x00\x47\x99\x01\x57\xa1\xb3\xe5\x37\xf1\x12\xf2\xb2\x50\x7d\xf1\x43\x63\x39\xc3\x74\x09\x40\x4c\x0e\x71\xc7\x63\xa2\x0c\x80\x9a\x81\xa2\x74\x3f\x40\x73\x80\xc6\x30\x69\x7a\xeb\xae\xa5\xdd\x2f\x33\xfd\x16\x62\xa1\xb5\x3b\xe4\x9d\x6e\xc6\x13\x00\xb6\xe6\x06\x78\xbe\xa1\xdb\xd7\xcd\xf6\xd6\xb2\xaf\x6e\x6a\x7b\x39\xef\xee\x6d\xfb\xff\xd3\xf8\xc1\x16\xb7\xf7\x94\x27\x74\xba\xc7\x6c\xf1\x97\x34\xbc\xff\x05\x00\x00\xff\xff\x4f\xed\x5c\x50\x00\x20\x00\x00")

func dbMigrationsAssetsGoBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsAssetsGo,
		"db/migrations/assets.go",
	)
}

func dbMigrationsAssetsGo() (*asset, error) {
	bytes, err := dbMigrationsAssetsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/assets.go", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001_initial_migration.sql":    dbMigrations0001_initial_migrationSql,
	"db/migrations/0002_dex_admin.sql":            dbMigrations0002_dex_adminSql,
	"db/migrations/0003_user_created_at.sql":      dbMigrations0003_user_created_atSql,
	"db/migrations/0004_session_nonce.sql":        dbMigrations0004_session_nonceSql,
	"db/migrations/0005_refresh_token_create.sql": dbMigrations0005_refresh_token_createSql,
	"db/migrations/0006_user_email_unique.sql":    dbMigrations0006_user_email_uniqueSql,
	"db/migrations/assets.go":                     dbMigrationsAssetsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001_initial_migration.sql":    &bintree{dbMigrations0001_initial_migrationSql, map[string]*bintree{}},
			"0002_dex_admin.sql":            &bintree{dbMigrations0002_dex_adminSql, map[string]*bintree{}},
			"0003_user_created_at.sql":      &bintree{dbMigrations0003_user_created_atSql, map[string]*bintree{}},
			"0004_session_nonce.sql":        &bintree{dbMigrations0004_session_nonceSql, map[string]*bintree{}},
			"0005_refresh_token_create.sql": &bintree{dbMigrations0005_refresh_token_createSql, map[string]*bintree{}},
			"0006_user_email_unique.sql":    &bintree{dbMigrations0006_user_email_uniqueSql, map[string]*bintree{}},
			"assets.go":                     &bintree{dbMigrationsAssetsGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
